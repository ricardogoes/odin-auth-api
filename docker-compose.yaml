version: '3.4'

services:
  odin.auth.api:
    container_name: odin_auth_api
    hostname: odin_auth_api
    build: 
      context: .
      args:
        GH_PAT: "${GH_PAT}"
    env_file:
      - .env
    networks: [default]
    ports:
      - 5001:80 
    environment:      
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - OdinSettings:ConnectionStrings:OdinMasterDB=${ODIN_MASTER_CONNECTION}
      - OdinSettings:Keycloak:Credentials:Secret=${KEYCLOAK_SECRET}
    depends_on:
      odin.auth.db:
        condition: service_healthy
      odin.keycloak:
        condition: service_started
    
  odin.auth.db:
    container_name: odin_auth_db
    hostname: odin_auth_db
    image: postgres:15.4-alpine
    environment:
      POSTGRES_USER: ${DB_ROOT_USERNAME}
      POSTGRES_PASSWORD: ${DB_ROOT_PASSWORD}
    command: postgres -c 'max_connections=200' && postgres -c 'shared_buffers=24MB' 
    volumes:
      - ./.docker/postgres-data:/var/lib/postgresql/data
      - ./.docker/db/create-databases.sql:/docker-entrypoint-initdb.d/create-databases.sql
    networks: [default]
    ports:
      - 5432:5432    
    healthcheck:
      test: "exit 0"

  odin.keycloak:
    container_name: odin_keycloak
    hostname: odin_keycloak
    image: quay.io/keycloak/keycloak:22.0    
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: odin_auth_db
      KC_DB_URL_DATABASE: odin_keycloak
      KC_DB_USERNAME: ${DB_ROOT_USERNAME}
      KC_DB_PASSWORD: ${DB_ROOT_PASSWORD}
      KC_DB_SCHEMA: public
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
    networks: [default]
    ports:
      - 8080:8080
    command:
      - start-dev
    depends_on:
      odin.auth.db:
        condition: service_healthy

networks:
  default:    
    name: odin.network
